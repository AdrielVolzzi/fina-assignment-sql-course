Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
Syntax:
	SELECT COUNT(*)
	FROM table_name;


i. Attribute table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM attribute;

ii. Business table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM business

iii. Category table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM category;

iv. Checkin table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM checkin;

v. elite_years table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM elite_years;

vi. friend table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM friend;

vii. hours table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM hours;

viii. photo table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM photo;

ix. review table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM review;

x. tip table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM tip;

xi. user table = 10000
	SELECT COUNT(*) AS TotalRecords
	FROM user;
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

Syntax:
	SELECT COUNT(DISTINCT (id_name))
	FROM table_name;

i. Business = 10000
	-- primary key
	SELECT COUNT(distinct (id)) AS DistinctRecords
	FROM business;

ii. Hours = 1562
	-- foreign key 
	SELECT COUNT(distinct (business_id)) AS DistinctRecords
	FROM hours;

iii. Category = 2643
	-- foreign key 
	SELECT COUNT(distinct (business_id)) AS DistinctRecords
	FROM category;

iv. Attribute = 1115
	-- foreign key 
	SELECT COUNT(distinct (business_id)) AS DistinctRecords
	FROM attribute;

v. Review = 10000, 8090, 9581
	-- primary key, 2 foreign key
	SELECT 
	        COUNT(distinct (id)) AS DistinctRecords
	       ,COUNT(distinct (business_id)) AS DistinctBusiness
	       ,COUNT(distinct (user_id)) AS DistinctUser
	FROM review;	

vi. Checkin = 493
	-- foreign key 
	SELECT COUNT(distinct (business_id)) AS DistinctRecords
	FROM checkin;

vii. Photo = 10000, 6493
	-- primary key, foreign key
	SELECT 
	        COUNT(distinct (id)) AS DistinctRecords
	       ,COUNT(distinct (business_id)) AS DistinctBusiness
	FROM photo;

viii. Tip =  537, 3979
	-- 2 foreign key
	SELECT 
	        COUNT(distinct (user_id)) AS DistinctUser
	       ,COUNT(distinct (business_id)) AS DistinctBusiness
	FROM tip;

ix. User = 10000
	-- primary key
	SELECT COUNT(distinct (id)) AS DistinctRecords
	FROM user;

x. Friend = 11
	-- foreign key
	SELECT COUNT(distinct (user_id)) AS DistinctUser
	FROM friend;

xi. Elite_years = 2780
	-- foreign key
	SELECT COUNT(distinct (user_id)) AS DistinctUser
	FROM elite_years;

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer:
	SELECT *
	FROM user
	WHERE id IS NULL
	    OR name IS NULL
	    OR review_count IS NULL
	    OR yelping_since IS NULL
	    OR useful IS NULL
	    OR funny IS NULL
	    OR cool IS NULL
	    OR fans IS NULL
	    OR average_stars IS NULL
	    OR compliment_hot IS NULL
	    OR compliment_more IS NULL
	    OR compliment_profile IS NULL
	    OR compliment_cute IS NULL
	    OR compliment_list IS NULL
	    OR compliment_note IS NULL
	    OR compliment_plain IS NULL
	    OR compliment_cool IS NULL
	    OR compliment_funny IS NULL
	    OR compliment_writer IS NULL
	    OR compliment_photos IS NULL;
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	Syntax:
		SELECT 
		            MIN(column_name)
		            ,MAX(column_name)
		            ,AVG(column_name)
		FROM table_name;


	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

		SELECT city, Count(stars) AS reviews
		FROM business
		GROUP BY city
		ORDER BY reviews desc;	
	
	Copy and Paste the Result Below:
		+-----------------+---------+
		| city            | reviews |
		+-----------------+---------+
		| Las Vegas       |    1561 |
		| Phoenix         |    1001 |
		| Toronto         |     985 |
		| Scottsdale      |     497 |
		| Charlotte       |     468 |
		| Pittsburgh      |     353 |
		| Montréal        |     337 |
		| Mesa            |     304 |
		| Henderson       |     274 |
		| Tempe           |     261 |
		| Edinburgh       |     239 |
		| Chandler        |     232 |
		| Cleveland       |     189 |
		| Gilbert         |     188 |
		| Glendale        |     188 |
		| Madison         |     176 |
		| Mississauga     |     150 |
		| Stuttgart       |     141 |
		| Peoria          |     105 |
		| Markham         |      80 |
		| Champaign       |      71 |
		| North Las Vegas |      70 |
		| North York      |      64 |
		| Surprise        |      60 |
		| Richmond Hill   |      54 |
		+-----------------+---------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT 
	    Count(stars) AS reviews
	    , AVG(stars) AS average
	FROM business
	WHERE city = 'Avon'
	GROUP BY city;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+---------+---------+
	| reviews | average |
	+---------+---------+
	|      10 |    3.45 |
	+---------+---------+

ii. Beachwood

SQL code used to arrive at answer:

	SELECT 
	    Count(stars) AS reviews
	    , AVG(stars) AS average
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY city;	

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
	+---------+---------------+
	| reviews |       average |
	+---------+---------------+
	|      14 | 3.96428571429 |
	+---------+---------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
		SELECT 
		    name
		    ,review_count
		FROM USER
		ORDER BY review_count DESC
		LIMIT 3;
		 	
	Copy and Paste the Result Below:
		
		+--------+--------------+
		| name   | review_count |
		+--------+--------------+
		| Gerald |         2000 |
		| Sara   |         1629 |
		| Yuri   |         1339 |
		+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	No, posing more reviews do not correlate with more fans, as seen in the table below, the user does not depend on reviews to have fans.

	SELECT 
	    name
	    ,review_count
	    ,fans
	FROM USER
	ORDER BY review_count DESC;
	
	+-----------+--------------+------+
	| name      | review_count | fans |
	+-----------+--------------+------+
	| Gerald    |         2000 |  253 |
	| Sara      |         1629 |   50 |
	| Yuri      |         1339 |   76 |
	| .Hon      |         1246 |  101 |
	| William   |         1215 |  126 |
	| Harald    |         1153 |  311 |
	| eric      |         1116 |   16 |
	| Roanna    |         1039 |  104 |
	| Mimi      |          968 |  497 |
	| Christine |          930 |  173 |
	| Ed        |          904 |   38 |
	| Nicole    |          864 |   43 |
	| Fran      |          862 |  124 |
	| Mark      |          861 |  115 |
	| Christina |          842 |   85 |
	| Dominic   |          836 |   37 |
	| Lissa     |          834 |  120 |
	| Lisa      |          813 |  159 |
	| Alison    |          775 |   61 |
	| Sui       |          754 |   78 |
	| Tim       |          702 |   35 |
	| L         |          696 |   10 |
	| Angela    |          694 |  101 |
	| Crissy    |          676 |   25 |
	| Lyn       |          675 |   45 |
	+-----------+--------------+------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

	Has 1780 reviews with the word "love" and 232 with the word "hate".

	SQL code used to arrive at answer:

		SELECT 
		    SUM(CASE 
		        WHEN text LIKE '%love%' 
		        THEN 1 ELSE 0 END) AS love_count
        
		    ,SUM(CASE 
		        WHEN text LIKE '%hate%' 
		        THEN 1 ELSE 0 END) AS hate_count
		FROM review;
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
		SELECT 
			name
			,fans
		FROM USER
		ORDER BY fans DESC
		LIMIT 10;
	
	Copy and Paste the Result Below:

		+-----------+------+
		| name      | fans |
		+-----------+------+
		| Amy       |  503 |
		| Mimi      |  497 |
		| Harald    |  311 |
		| Gerald    |  253 |
		| Christine |  173 |
		| Lisa      |  159 |
		| Cat       |  133 |
		| William   |  126 |
		| Fran      |  124 |
		| Lissa     |  120 |
		+-----------+------+
		
Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?


ii. Do the two groups you chose to analyze have a different number of reviews?
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
         
ii. Difference 2:
         
         
         
SQL code used for analysis:

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
                  
iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset:
